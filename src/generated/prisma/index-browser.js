
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ColorLookupScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.DeviceEntryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category_id: 'category_id',
  image_id: 'image_id',
  is_internal: 'is_internal',
  legacy_unique_key: 'legacy_unique_key'
};

exports.Prisma.DeviceGroupEntryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category_id: 'category_id',
  image_id: 'image_id',
  is_internal: 'is_internal',
  legacy_unique_key: 'legacy_unique_key'
};

exports.Prisma.DeviceGroupMapDeviceScalarFieldEnum = {
  group_id: 'group_id',
  device_id: 'device_id'
};

exports.Prisma.DeviceGroupMapDeviceGroupScalarFieldEnum = {
  parent_group_id: 'parent_group_id',
  child_group_id: 'child_group_id'
};

exports.Prisma.DeviceImageColorsScalarFieldEnum = {
  device_image_id: 'device_image_id',
  color_id: 'color_id',
  dark_mode: 'dark_mode'
};

exports.Prisma.DeviceLookupArchitectureScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.DeviceLookupCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.DeviceLookupImageScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.DeviceLookupSocScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.DeviceMapArchitectureScalarFieldEnum = {
  device_id: 'device_id',
  architecture_id: 'architecture_id'
};

exports.Prisma.DeviceMapIdentifierScalarFieldEnum = {
  device_id: 'device_id',
  identifier: 'identifier'
};

exports.Prisma.DeviceMapModelScalarFieldEnum = {
  device_id: 'device_id',
  model: 'model'
};

exports.Prisma.DeviceMapReleaseScalarFieldEnum = {
  id: 'id',
  device_id: 'device_id',
  datetime: 'datetime',
  depth: 'depth'
};

exports.Prisma.DeviceMapSocScalarFieldEnum = {
  device_id: 'device_id',
  soc_id: 'soc_id'
};

exports.Prisma.MapDeviceOsScalarFieldEnum = {
  device_id: 'device_id',
  os_id: 'os_id'
};

exports.Prisma.OsEntryScalarFieldEnum = {
  id: 'id',
  name_id: 'name_id',
  version: 'version',
  build: 'build',
  release_datetime: 'release_datetime',
  release_datetime_depth: 'release_datetime_depth',
  is_release: 'is_release',
  is_beta: 'is_beta',
  is_rc: 'is_rc',
  is_internal: 'is_internal',
  is_rsr: 'is_rsr',
  is_sdk: 'is_sdk',
  is_simulator: 'is_simulator',
  image_id: 'image_id',
  embedded_os_build: 'embedded_os_build',
  bridge_os_build: 'bridge_os_build',
  notes: 'notes',
  legacy_unique_key: 'legacy_unique_key',
  search: 'search'
};

exports.Prisma.OsEntryBuildTrainScalarFieldEnum = {
  os_id: 'os_id',
  build_train: 'build_train'
};

exports.Prisma.OsEntryIpdScalarFieldEnum = {
  os_id: 'os_id',
  ipd_type: 'ipd_type',
  url: 'url',
  active: 'active'
};

exports.Prisma.OsEntryOsStringMapScalarFieldEnum = {
  os_id: 'os_id',
  os_string: 'os_string'
};

exports.Prisma.OsEntryPreinstalledScalarFieldEnum = {
  os_id: 'os_id',
  device_id: 'device_id'
};

exports.Prisma.OsEntryReleaseNoteScalarFieldEnum = {
  os_id: 'os_id',
  url: 'url',
  active: 'active'
};

exports.Prisma.OsEntrySafariVersionScalarFieldEnum = {
  os_id: 'os_id',
  version: 'version'
};

exports.Prisma.OsEntrySecurityNoteScalarFieldEnum = {
  os_id: 'os_id',
  url: 'url',
  active: 'active'
};

exports.Prisma.OsLookupNameScalarFieldEnum = {
  id: 'id',
  name: 'name',
  priority: 'priority'
};

exports.Prisma.SourceEntryScalarFieldEnum = {
  id: 'id',
  os_id: 'os_id',
  source_type: 'source_type',
  skip_update_links: 'skip_update_links',
  size: 'size',
  windows_update_id: 'windows_update_id',
  windows_revision_id: 'windows_revision_id'
};

exports.Prisma.SourceHashScalarFieldEnum = {
  source_id: 'source_id',
  hash_type: 'hash_type',
  hash_value: 'hash_value'
};

exports.Prisma.SourceLinkScalarFieldEnum = {
  source_id: 'source_id',
  url: 'url',
  active: 'active'
};

exports.Prisma.SourceMapDeviceScalarFieldEnum = {
  source_id: 'source_id',
  device_id: 'device_id'
};

exports.Prisma.SourceMapOsStringScalarFieldEnum = {
  source_id: 'source_id',
  os_string: 'os_string'
};

exports.Prisma.SourcePrequisiteBuildScalarFieldEnum = {
  source_id: 'source_id',
  build: 'build'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.ColorLookupOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.DeviceEntryOrderByRelevanceFieldEnum = {
  name: 'name',
  legacy_unique_key: 'legacy_unique_key'
};

exports.Prisma.DeviceGroupEntryOrderByRelevanceFieldEnum = {
  name: 'name',
  legacy_unique_key: 'legacy_unique_key'
};

exports.Prisma.DeviceLookupArchitectureOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.DeviceLookupCategoryOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.DeviceLookupImageOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.DeviceLookupSocOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.DeviceMapIdentifierOrderByRelevanceFieldEnum = {
  identifier: 'identifier'
};

exports.Prisma.DeviceMapModelOrderByRelevanceFieldEnum = {
  model: 'model'
};

exports.Prisma.OsEntryOrderByRelevanceFieldEnum = {
  version: 'version',
  build: 'build',
  image_id: 'image_id',
  embedded_os_build: 'embedded_os_build',
  bridge_os_build: 'bridge_os_build',
  notes: 'notes',
  legacy_unique_key: 'legacy_unique_key',
  search: 'search'
};

exports.Prisma.OsEntryBuildTrainOrderByRelevanceFieldEnum = {
  build_train: 'build_train'
};

exports.Prisma.OsEntryIpdOrderByRelevanceFieldEnum = {
  ipd_type: 'ipd_type',
  url: 'url'
};

exports.Prisma.OsEntryOsStringMapOrderByRelevanceFieldEnum = {
  os_string: 'os_string'
};

exports.Prisma.OsEntryReleaseNoteOrderByRelevanceFieldEnum = {
  url: 'url'
};

exports.Prisma.OsEntrySafariVersionOrderByRelevanceFieldEnum = {
  version: 'version'
};

exports.Prisma.OsEntrySecurityNoteOrderByRelevanceFieldEnum = {
  url: 'url'
};

exports.Prisma.OsLookupNameOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.SourceEntryOrderByRelevanceFieldEnum = {
  source_type: 'source_type',
  windows_update_id: 'windows_update_id',
  windows_revision_id: 'windows_revision_id'
};

exports.Prisma.SourceHashOrderByRelevanceFieldEnum = {
  hash_type: 'hash_type',
  hash_value: 'hash_value'
};

exports.Prisma.SourceLinkOrderByRelevanceFieldEnum = {
  url: 'url'
};

exports.Prisma.SourceMapOsStringOrderByRelevanceFieldEnum = {
  os_string: 'os_string'
};

exports.Prisma.SourcePrequisiteBuildOrderByRelevanceFieldEnum = {
  build: 'build'
};


exports.Prisma.ModelName = {
  ColorLookup: 'ColorLookup',
  DeviceEntry: 'DeviceEntry',
  DeviceGroupEntry: 'DeviceGroupEntry',
  DeviceGroupMapDevice: 'DeviceGroupMapDevice',
  DeviceGroupMapDeviceGroup: 'DeviceGroupMapDeviceGroup',
  DeviceImageColors: 'DeviceImageColors',
  DeviceLookupArchitecture: 'DeviceLookupArchitecture',
  DeviceLookupCategory: 'DeviceLookupCategory',
  DeviceLookupImage: 'DeviceLookupImage',
  DeviceLookupSoc: 'DeviceLookupSoc',
  DeviceMapArchitecture: 'DeviceMapArchitecture',
  DeviceMapIdentifier: 'DeviceMapIdentifier',
  DeviceMapModel: 'DeviceMapModel',
  DeviceMapRelease: 'DeviceMapRelease',
  DeviceMapSoc: 'DeviceMapSoc',
  MapDeviceOs: 'MapDeviceOs',
  OsEntry: 'OsEntry',
  OsEntryBuildTrain: 'OsEntryBuildTrain',
  OsEntryIpd: 'OsEntryIpd',
  OsEntryOsStringMap: 'OsEntryOsStringMap',
  OsEntryPreinstalled: 'OsEntryPreinstalled',
  OsEntryReleaseNote: 'OsEntryReleaseNote',
  OsEntrySafariVersion: 'OsEntrySafariVersion',
  OsEntrySecurityNote: 'OsEntrySecurityNote',
  OsLookupName: 'OsLookupName',
  SourceEntry: 'SourceEntry',
  SourceHash: 'SourceHash',
  SourceLink: 'SourceLink',
  SourceMapDevice: 'SourceMapDevice',
  SourceMapOsString: 'SourceMapOsString',
  SourcePrequisiteBuild: 'SourcePrequisiteBuild'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
